{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2906ae2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello friend\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 1 ####\n",
    "\n",
    "# python program to print \"Hello friend\" \n",
    "print(\"Hello friend\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8620481b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello dear\n"
     ]
    }
   ],
   "source": [
    "# python program to print \"Hello dear\" \n",
    "print(\"Hello dear\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7f5d45b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naveen Sharma\n"
     ]
    }
   ],
   "source": [
    "name = \"Naveen Sharma\"\n",
    "print(name.title())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "40b371ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NAVEEN SHARMA\n",
      "naveen sharma\n"
     ]
    }
   ],
   "source": [
    "name = \"Naveen Sharma\"\n",
    "print(name.upper())\n",
    "print(name.lower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8266dc63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naveen Sharma\n"
     ]
    }
   ],
   "source": [
    "first_name = \"Naveen\"\n",
    "last_name = \"Sharma\"\n",
    "full_name = first_name + \" \" + last_name\n",
    "print(full_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "aeebfd89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, Naveen Sharma!\n"
     ]
    }
   ],
   "source": [
    "first_name = \"Naveen\"\n",
    "last_name = \"Sharma\"\n",
    "full_name = first_name + \" \" + last_name\n",
    "print(\"Hello, \" + full_name.title() + \"!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "44df901e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, Naveen Sharma!\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 2 ####\n",
    "\n",
    "first_name = \"Naveen\"\n",
    "last_name = \"Sharma\"\n",
    "full_name = first_name + \" \" + last_name\n",
    "message = \"Hello, \" + full_name.title() + \"!\"\n",
    "print(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "044329ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Eric, would you like to learn some Python today?\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 3 ####\n",
    "\n",
    "message = (\"Hello Eric, would you like to learn some Python today?\")\n",
    "print(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "38b070e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Albert Einstein once said, “A person who never made a mistake never tried anything new.\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 4 ####\n",
    "\n",
    "message = (\"Albert Einstein once said, “A person who never made a mistake never tried anything new.\")\n",
    "print(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "faaaa89f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A person who never made a mistake never tried anything new, Albert Einstein!\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 5 ####\n",
    "\n",
    "famous_person = \"Albert Einstein\"\n",
    "message = \"A person who never made a mistake never tried anything new, \" + famous_person.title() + \"!\"\n",
    "print(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "21cee1ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "8\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 6 ####\n",
    "Addition: print(5 + 3) \n",
    "Subtraction: print(10 - 2)\n",
    "Subtraction: print(4 * 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "2b5230eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5+3\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 7 ####\n",
    "\n",
    "# python program to print \"(5+3)\" \n",
    "print(\"5+3\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a23e0861",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello , A person who never made a mistake never tried anything new!\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 8 ####\n",
    "\n",
    "# Say hello to everyone.\n",
    "print(\"Hello , A person who never made a mistake never tried anything new!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c09ddf2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Eric', 'Arnold', 'kane', 'bigshow']\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 9 #### Print each person’s name by accessing each element in the list, one at a time.\n",
    "\n",
    "Friendsname = ['Eric', 'Arnold', 'kane', 'bigshow']\n",
    "print(Friendsname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "9d42d7c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My first best friend was a Eric.\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 10 ####\n",
    "\n",
    "Friendsname = ['Eric', 'Arnold', 'kane', 'bigshow']\n",
    "message = \"My first best friend was a \" + Friendsname[0].title() + \".\"\n",
    "print(message)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "77a8d2b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9643312584\n"
     ]
    }
   ],
   "source": [
    "# python program to print \"(9643312584)\" \n",
    "print(\"9643312584\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "77645e4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9,6,4,3,3,1,2,5,8,4\n"
     ]
    }
   ],
   "source": [
    "# python program to print \"(9,6,4,3,3,1,2,5,8,4)\" \n",
    "print(\"9,6,4,3,3,1,2,5,8,4\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f48d7b1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Maruti suzuki', 'Toyota', 'hundai']\n",
      "['Ford', 'Toyota', 'hundai']\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 11 ####\n",
    "\n",
    "cars = ['Maruti suzuki', 'Toyota', 'hundai']\n",
    "print(cars)\n",
    "cars[0] = 'Ford'\n",
    "print(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "23bd4afd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Bajaj', 'TVS', 'BMW']\n",
      "['Royal Enfield', 'TVS', 'BMW']\n"
     ]
    }
   ],
   "source": [
    "#### Exercise 11.2 ####\n",
    "\n",
    "Motorcycles = ['Bajaj', 'TVS', 'BMW']\n",
    "print(Motorcycles)\n",
    "Motorcycles[0] = 'Royal Enfield'\n",
    "print(Motorcycles)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
